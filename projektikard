#include <Adafruit_LiquidCrystal.h>
#include <Keypad.h>

Adafruit_LiquidCrystal lcd(0);

// Definícia klávesnice
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
// Alternatívna konfigurácia pinov (často používaná)
byte rowPins[ROWS] = {9, 8, 7, 6}; // R1, R2, R3, R4
byte colPins[COLS] = {5, 4, 3, 2}; // C1, C2, C3, C4
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// Piny
const int piezoPin = A2;
const int pirPin = A3;

// Premenné pre PIR štatistiku
int pirStateChanges = 0;
int lastPirState = LOW;
unsigned long lastPirStateChangeTime = 0;

// Premenné pre čas
unsigned long startTime;
unsigned long lastTimeUpdate = 0;
const unsigned long TIME_UPDATE_INTERVAL = 5000;

// Konštanty pre dátum
const int FIXED_DAY = 25;
const int FIXED_MONTH = 3;
const int FIXED_YEAR = 2025;

// Premenné pre PIN
const char correctPin[] = "9745";
char enteredPin[5] = "";
int pinIndex = 0;
bool pinModeActive = false;
unsigned long lastKeyPressTime = 0;
const unsigned long PIN_TIMEOUT = 5000; // 5 sekúnd nečinnosti

void displayMessage(const char* message) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(message);
}

void displayDateTime() {
  unsigned long currentTime = (millis() - startTime) / 1000;
  
  int seconds = currentTime % 60;
  int minutes = (currentTime / 60) % 60;
  int hours = (currentTime / 3600) % 24;

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Dnes: ");
  
  if (FIXED_DAY < 10) lcd.print("0");
  lcd.print(FIXED_DAY);
  lcd.print(".");
  if (FIXED_MONTH < 10) lcd.print("0");
  lcd.print(FIXED_MONTH);
  lcd.print(".");
  lcd.print(FIXED_YEAR);
  
  lcd.setCursor(0, 1);
  
  if (hours < 10) lcd.print("0");
  lcd.print(hours);
  lcd.print(":");
  if (minutes < 10) lcd.print("0");
  lcd.print(minutes);
  lcd.print(":");
  if (seconds < 10) lcd.print("0");
  lcd.print(seconds);
}

void playTone(int frequency, int duration) {
  tone(piezoPin, frequency, duration);
  delay(duration);
  noTone(piezoPin);
}

void resetPinEntry() {
  pinIndex = 0;
  memset(enteredPin, 0, sizeof(enteredPin));
  pinModeActive = false;
  displayDateTime();
}

void setup() {
  Serial.begin(9600);
  lcd.begin(16, 2);
  lcd.setBacklight(1);
  
  pinMode(piezoPin, OUTPUT);
  pinMode(pirPin, INPUT);
  
  startTime = millis();
  displayDateTime();
}

void loop() {
  // Sledovanie zmien PIR senzora
  int currentPirState = digitalRead(pirPin);
  
  if (currentPirState != lastPirState) {
    pirStateChanges++;
    lastPirStateChangeTime = millis();
    lastPirState = currentPirState;
  }

  // Spracovanie klávesnice
  char key = keypad.getKey();
  
  if (key) {
    Serial.print("Stlacene: ");
    Serial.println(key);
    
    // Ak nie sme v PIN móde, spustíme ho pri stlačení čísla
    if (!pinModeActive && isdigit(key)) {
      pinModeActive = true;
      pinIndex = 0;
      lcd.clear();
      lcd.print("Zadaj PIN:");
      lcd.setCursor(0, 1);
      playTone(1000, 200);
    }

    lastKeyPressTime = millis();
    
    // Spracovanie číselných kláves v PIN móde
    if (pinModeActive && isdigit(key) && pinIndex < 4) {
      enteredPin[pinIndex] = key;
      pinIndex++;
      
      lcd.setCursor(0, 1);
      for (int i = 0; i < pinIndex; i++) {
        lcd.print("*");
      }
      
      playTone(1500, 100);
    }

    // Overenie PINu po zadaní 4 číslic
    if (pinModeActive && pinIndex == 4) {
      if (strcmp(enteredPin, correctPin) == 0) {
        displayMessage("PIN spravny!");
        playTone(2000, 500);
      } else {
        displayMessage("PIN nespravny!");
        playTone(300, 1000);
      }
      delay(2000);
      resetPinEntry();
    }
  }

  // Kontrola timeoutu PIN módu
  if (pinModeActive && (millis() - lastKeyPressTime > PIN_TIMEOUT)) {
    resetPinEntry();
  }

  // Aktualizácia času
  if (!pinModeActive && millis() - lastTimeUpdate >= TIME_UPDATE_INTERVAL) {
    displayDateTime();
    lastTimeUpdate = millis();
  }
}
